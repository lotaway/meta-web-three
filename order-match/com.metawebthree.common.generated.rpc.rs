// This file is @generated by prost-build.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DeviceRiskTag {
    Unknown = 0,
    Emu = 1,
    LowRisk = 2,
    HighRisk = 3,
}
impl DeviceRiskTag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Emu => "EMU",
            Self::LowRisk => "LOW_RISK",
            Self::HighRisk => "HIGH_RISK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "EMU" => Some(Self::Emu),
            "LOW_RISK" => Some(Self::LowRisk),
            "HIGH_RISK" => Some(Self::HighRisk),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Feature {
    #[prost(oneof = "feature::Kind", tags = "1, 2, 3, 4, 5, 6")]
    pub kind: ::core::option::Option<feature::Kind>,
}
/// Nested message and enum types in `Feature`.
pub mod feature {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        #[prost(int32, tag = "1")]
        DeviceSharedDegree(i32),
        #[prost(enumeration = "super::DeviceRiskTag", tag = "2")]
        DeviceRiskTag(i32),
        #[prost(float, tag = "3")]
        ExternalDebtRatio(f32),
        #[prost(bool, tag = "4")]
        FirstOrder(bool),
        #[prost(float, tag = "5")]
        GpsStability(f32),
        #[prost(int32, tag = "6")]
        Age(i32),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TestRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TestResponse {
    #[prost(int32, tag = "1")]
    pub result: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScoreRequest {
    #[prost(string, tag = "1")]
    pub scene: ::prost::alloc::string::String,
    #[prost(map = "string, message", tag = "2")]
    pub features: ::std::collections::HashMap<::prost::alloc::string::String, Feature>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScoreResponse {
    #[prost(double, tag = "1")]
    pub score: f64,
}
/// Generated server implementations.
pub mod risk_scorer_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RiskScorerServiceServer.
    #[async_trait]
    pub trait RiskScorerService: std::marker::Send + std::marker::Sync + 'static {
        async fn test(
            &self,
            request: tonic::Request<super::TestRequest>,
        ) -> std::result::Result<tonic::Response<super::TestResponse>, tonic::Status>;
        async fn score(
            &self,
            request: tonic::Request<super::ScoreRequest>,
        ) -> std::result::Result<tonic::Response<super::ScoreResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct RiskScorerServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RiskScorerServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RiskScorerServiceServer<T>
    where
        T: RiskScorerService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/com.metawebthree.common.generated.rpc.RiskScorerService/test" => {
                    #[allow(non_camel_case_types)]
                    struct testSvc<T: RiskScorerService>(pub Arc<T>);
                    impl<
                        T: RiskScorerService,
                    > tonic::server::UnaryService<super::TestRequest> for testSvc<T> {
                        type Response = super::TestResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TestRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RiskScorerService>::test(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = testSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/com.metawebthree.common.generated.rpc.RiskScorerService/score" => {
                    #[allow(non_camel_case_types)]
                    struct scoreSvc<T: RiskScorerService>(pub Arc<T>);
                    impl<
                        T: RiskScorerService,
                    > tonic::server::UnaryService<super::ScoreRequest> for scoreSvc<T> {
                        type Response = super::ScoreResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ScoreRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RiskScorerService>::score(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = scoreSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for RiskScorerServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "com.metawebthree.common.generated.rpc.RiskScorerService";
    impl<T> tonic::server::NamedService for RiskScorerServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
