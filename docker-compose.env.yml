services:
  zookeeper:
    image: ${ZOOKEEPER_IMAGE:-zookeeper:latest}
    container_name: default-zookeeper
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    restart: unless-stopped
    networks:
      - default
  # mysql:
  #   image: ${MYSQL_IMAGE:-mysql:latest}
  #   volumes:
  #     - mysql_data:/var/lib/mysql
  #   ports:
  #     - ${MYSQL_PORT:-3306}:3306
  #   environment:
  #     - MYSQL_USERNAME=${MYSQL_USERNAME:-admin}
  #     - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-123123}
  #     - MYSQL_DATABASE=${MYSQL_DATABASE:-mysql}
  #     - TZ=${TIMEZONE:-Asia/Shanghai}
  #   command: --default-authentication-plugin=mysql_native_password
  #     --character-set-server=utf8mb4
  #     --collation-server=utf8mb4_general_ci
  #     --sql_mode=IGNORE_SPACE,NO_ENGINE_SUBSTITUTION
  #     --lower_case_table_names=2
  #   restart: unless-stopped
  #   networks:
  #     - default
  # PostgreSQL
  postgres:
    image: postgres:latest
    container_name: default-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123123}
      POSTGRES_DB: postgres
      POSTGRES_SHARED_PRELOAD_LIBRARIES: "pg_stat_statements"
      # PG_STAT_STATEMENTS_MAX: "10000"
      PG_STAT_STATEMENTS_TRACK: "top"
      PG_STAT_STATEMENTS_TRACK_UTILITY: "off"
      PG_STAT_STATEMENTS_SAVE: "on"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - default

  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: default-mongodb
    environment:
      # MONGO_INITDB_NAME: admin
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-123123}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    networks:
      - default

  # Redis
  redis:
    image: redis:latest
    container_name: default-redis
    command: redis-server --requirepass "${REDIS_PASSWORD:-123123}"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - default

  # RocketMQ (NameServer + Broker)
  rocketmq-namesrv:
    image: apache/rocketmq:latest
    container_name: default-rocketmq-namesrv
    command: sh mqnamesrv
    ports:
      - "${ROCKETMQ_NAMESRV_PORT:-9876}:9876"
    restart: unless-stopped
    networks:
      - default

  rocketmq-broker:
    image: apache/rocketmq:latest
    container_name: default-rocketmq-broker
    environment:
      - NAMESRV_ADDR=rocketmq-namesrv:9876
    ports:
      - "${ROCKETMQ_BROKER_PORT1:-10909}:10909"
      - "${ROCKETMQ_BROKER_PORT2:-10911}:10911"
    volumes:
      - ./rocketmq/broker.conf:/home/rocketmq/rocketmq-*/conf/broker.conf
      - rocketmq_data:/home/rocketmq/rocketmq-*/store
    depends_on:
      - rocketmq-namesrv
    restart: unless-stopped
    networks:
      - default
    command: sh mqbroker -c /home/rocketmq/rocketmq-*/conf/broker.conf

  # RocketMQ UI Manager
  rocketmq-console:
    image: styletang/rocketmq-console-ng
    container_name: default-rocketmq-console
    environment:
      JAVA_OPTS: -Drocketmq.namesrv.addr=rocketmq-namesrv:9876
    ports:
      - "${ROCKETMQ_CONSOLE_PORT:-8080}:8080"
    restart: unless-stopped
    networks:
      - default

  # Kafka (KRaft Mode)
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: default-kafka
    environment:
      CLUSTER_ID: "${KAFKA_CLUSTER_ID:-b28ea04f9004080a4a34207b23292d3}"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
    ports:
      - "${KAFKA_PORT1:-9092}:9092"
      - "${KAFKA_PORT2:-9093}:9093"
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - default

  # Nginx
  nginx:
    image: "${NGINX_IMAGE:-nginx:latest}"
    container_name: default-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/html:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - default

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.12.0
    container_name: default-elasticsearch
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-123123}
      xpack.security.enabled: "true"
    ports:
      - "${ES_PORT1:-9200}:9200"
      - "${ES_PORT2:-9300}:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - es_config:/usr/share/elasticsearch/config
    restart: unless-stopped
    networks:
      - default

  # Elasticsearch UI Manager
  kibana:
    image: kibana:8.12.0
    container_name: default-kibana
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      ELASTICSEARCH_URL: "http://default-elasticsearch:9200"
      ELASTICSEARCH_USERNAME: "elastic"
      ELASTICSEARCH_PASSWORD: "${ELASTIC_PASSWORD:-123123}"
    restart: unless-stopped
    networks:
      - default

networks:
  default:
    name: default-bridge
    driver: bridge

# Data Volumes Define
volumes:
  # mysql_data:
  postgres_data:
  mongodb_data:
  redis_data:
  rocketmq_data:
  kafka_data:
  es_data:
  es_config:
